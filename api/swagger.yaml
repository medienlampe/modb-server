---
swagger: "2.0"
info:
  description: ""
  version: "0.0.1"
  title: "ModelDB API"
host: "virtserver.swaggerhub.com"
basePath: "/medienlampe/modb-api/0.0.1"
tags:
- name: "model"
  description: "Everything about your models."
- name: "idea"
  description: "Everything related to your ideas."
- name: "contract"
  description: "Contracts and legal mumbojumbo"
schemes:
- "https"
paths:
  /model:
    post:
      tags:
      - "model"
      summary: "Add a new model to the database"
      description: ""
      operationId: "addModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Model object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Model"
        x-exportParamName: "Body"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /model/findByTags:
    get:
      tags:
      - "model"
      summary: "Finds Models by tags"
      description: "Muliple tags can be provided with comma separated strings. Use\
        \         tag1, tag2, tag3 for testing."
      operationId: "findModelsByTags"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tags"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Model"
        400:
          description: "Invalid tag value"
      security:
      - api_key: []
  /model/{modelId}:
    get:
      tags:
      - "model"
      summary: "Find model by ID"
      description: "Returns a single model"
      operationId: "getModelById"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ModelId"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Model not found"
      security:
      - api_key: []
    put:
      tags:
      - "model"
      summary: "Update an existing model"
      description: ""
      operationId: "updateModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ModelId"
      - in: "body"
        name: "body"
        description: "Model object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Model"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Model not found"
        405:
          description: "Validation exception"
      security:
      - api_key: []
    delete:
      tags:
      - "model"
      summary: "Deletes a model"
      description: ""
      operationId: "deleteModel"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "modelId"
        in: "path"
        description: "Model id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ModelId"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "model not found"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "passwordhash"
        in: "query"
        description: "The passwordhash for logging in."
        required: true
        type: "string"
        x-exportParamName: "Passwordhash"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/passwordhash supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /idea:
    post:
      tags:
      - "idea"
      summary: "Add a new idea to the database"
      description: ""
      operationId: "addIdea"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Idea object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Idea"
        x-exportParamName: "Body"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /idea/{ideaId}:
    get:
      tags:
      - "idea"
      summary: "Find idea by ID"
      description: "Returns a single idea"
      operationId: "getIdeaById"
      produces:
      - "application/json"
      parameters:
      - name: "ideaId"
        in: "path"
        description: "ID of idea to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IdeaId"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Idea"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Model not found"
      security:
      - api_key: []
    put:
      tags:
      - "idea"
      summary: "Update an existing idea"
      description: ""
      operationId: "updateIdea"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ideaId"
        in: "path"
        description: "ID of idea to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IdeaId"
      - in: "body"
        name: "body"
        description: "Idea object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Idea"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Idea not found"
        405:
          description: "Validation exception"
      security:
      - api_key: []
    delete:
      tags:
      - "idea"
      summary: "Deletes an idea"
      description: ""
      operationId: "deleteIdea"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "ideaId"
        in: "path"
        description: "Idea id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IdeaId"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "model not found"
      security:
      - api_key: []
  /contract:
    post:
      tags:
      - "contract"
      summary: "Add a new contract to the database"
      description: ""
      operationId: "addContract"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Contract object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Contract"
        x-exportParamName: "Body"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /contract/{contractId}:
    get:
      tags:
      - "contract"
      summary: "Find contract by ID"
      description: "Returns a single contract"
      operationId: "getContractById"
      produces:
      - "application/json"
      parameters:
      - name: "contractId"
        in: "path"
        description: "ID of contract to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ContractId"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contract"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Model not found"
      security:
      - api_key: []
    put:
      tags:
      - "contract"
      summary: "Update an existing contract"
      description: ""
      operationId: "updateContract"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contractId"
        in: "path"
        description: "ID of contract to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ContractId"
      - in: "body"
        name: "body"
        description: "Contract object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Contract"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Contract not found"
        405:
          description: "Validation exception"
      security:
      - api_key: []
    delete:
      tags:
      - "contract"
      summary: "Deletes an contract"
      description: ""
      operationId: "deleteContract"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "contractId"
        in: "path"
        description: "Contract id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ContractId"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "model not found"
      security:
      - api_key: []
  /contract/{contractId}/addContractFile:
    post:
      tags:
      - "contract"
      summary: "uploads an contract"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "contractId"
        in: "path"
        description: "ID of contractId to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ContractId"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        x-exportParamName: "AdditionalMetadata"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        x-exportParamName: "File"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Model:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      surname:
        type: "string"
      address:
        $ref: "#/definitions/Address"
      birthdate:
        type: "string"
        format: "date"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
    example:
      address:
        number: 1
        country: "country"
        city: "city"
        street: "street"
        postalcode: 5
        id: 6
      birthdate: "2000-01-23"
      surname: "surname"
      contract:
      - date: "2000-01-23"
        file: "file"
        active: true
        id: 5
        type: "type"
        version: "version"
      - date: "2000-01-23"
        file: "file"
        active: true
        id: 5
        type: "type"
        version: "version"
      name: "name"
      id: 0
      tags:
      - name: "name"
        id: 2
      - name: "name"
        id: 2
  Address:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      street:
        type: "string"
      number:
        type: "integer"
        format: "int32"
      city:
        type: "string"
      postalcode:
        type: "integer"
      country:
        type: "string"
    example:
      number: 1
      country: "country"
      city: "city"
      street: "street"
      postalcode: 5
      id: 6
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      id: 0
      email: "email"
      username: "username"
  Idea:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      content:
        type: "string"
    example:
      name: "name"
      id: 0
      content: "content"
  Contract:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      version:
        type: "string"
      date:
        type: "string"
        format: "date"
      active:
        type: "boolean"
      file:
        type: "string"
    example:
      date: "2000-01-23"
      file: "file"
      active: true
      id: 5
      type: "type"
      version: "version"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 2
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
